# Give the GITHUB_TOKEN permission to push packages
permissions:
  contents: read
  packages: write

name: Build, Push & Manifest Multi-Arch Image

on:
  push:
    paths:
      - '.github/workflows/image-build.yml'
      - 'Dockerfile'
  pull_request:
    paths:
      - '.github/workflows/image-build.yml'
      - 'Dockerfile'
  workflow_dispatch:

jobs:
  # 1) Build & push per-arch
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, arm64, armhf]

    outputs:
      image_name: ${{ steps.lowercase.outputs.image_name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Register QEMU for emulation
        uses: docker/setup-qemu-action@v2

      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Compute lowercase image name
        id: lowercase
        run: |
          IMAGE=$(echo $GITHUB_REPOSITORY | tr '[:upper:]' '[:lower:]')
          echo "image_name=$IMAGE" >> $GITHUB_OUTPUT

      - name: Build & push ${{ matrix.arch }}
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/${{ matrix.arch }}
          push: true
          tags: |
            ghcr.io/${{ steps.lowercase.outputs.image_name }}:latest-${{ matrix.arch }}
            ghcr.io/${{ steps.lowercase.outputs.image_name }}:${{ github.sha }}-${{ matrix.arch }}

  # 2) Assemble the multi-arch manifest
  manifest:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create multi-arch manifest
        run: |
          IMAGE=${{ needs.build.outputs.image_name }}
          docker buildx imagetools create \
            --tag ghcr.io/$IMAGE:latest \
            ghcr.io/$IMAGE:latest-amd64 \
            ghcr.io/$IMAGE:latest-arm64 \
            ghcr.io/$IMAGE:latest-armhf
